
/*mixins 可以混和其他的React 但是混和之後state是各自獨立的*/

var ReactMixins={
	getInitialState:function(){
		return {count:0}
	},
	componentWillMount:function(){
		console.log("Will mount");
	},
	addCount:function(){
		this.setState({count:this.state.count+1});
	}

};


var Label=React.createClass({displayName: "Label",
	mixins:[ReactMixins],
 	componentWillMount:function(){
    	setInterval(this.addCount,1000);
  	},
	render:function () {
		return(
			React.createElement("label", null, 
				this.props.txt, "- ", this.state.count
			)
		);
	}
});

var Btn=React.createClass({displayName: "Btn",
	mixins:[ReactMixins],
	update:function(){
		this.addCount();
	},
	render:function () {
		return(
			React.createElement("button", {onClick: this.update}, 
				this.props.txt, "- ", this.state.count
			)
		);
	}
});

var Mixins=React.createClass({displayName: "Mixins",
	render:function () {
		return (
			React.createElement("div", null, 
				React.createElement(Btn, {txt: "this is btn"}), 
				React.createElement("br", null), 
				React.createElement(Label, {txt: "this is lable"})
			)
		);
	}
});

React.render(React.createElement(Mixins, null),document.getElementById("MixinsDiv"));


var DivTest=React.createClass({displayName: "DivTest",
	changeTab:function(Tab){
		this.setProps({active:Tab.Id});
		this.props.change();
	},
	render: function() {
		return (
			React.createElement("div", null, " ", this.props.active, 
				React.createElement("ul", {className: "nav nav-tabs"}, 
				
					this.props.data.map(function(item,i){
						var boundClick = this.changeTab.bind(this,item);
						var liClass=this.props.active===item.Id ?'active':''
						return (
							React.createElement("li", {key: i, className: liClass}, 
								React.createElement("a", {onClick: boundClick}, 
									item.TabName
								)
							)
						)

					}.bind(this))
				
				)
			)
		);
	}

});


var h2o =angular.module("app",[]);

h2o.controller('appCtrl', ['$scope', function($scope){
	$scope.active=0;

	$scope.TabData=[
		{Id:0,TabName:"tab1",TabContent:"tab content1"},
		{Id:1,TabName:"tab2",TabContent:"tab content2"},
		{Id:2,TabName:"tab3",TabContent:"tab content3"}
	]
	$scope.change=function(){
		console.log("change");
	}
	$scope.changTab=function(id){
		$scope.active=id;
		React.render(React.createElement(DivTest, {data: $scope.TabData, active: $scope.active, change: $scope.change}),document.getElementById("ngDiv"));
	}

}]);

var datas=[
    {id: 0, name: "mia"},
    {id: 1, name: "ruey"}
];

/*
componentWillReceiveProps --> Props被異動時
shouldComponentUpdate -->Props 及State變動進入 確定是否更新Dom 當回傳true會執行 render
componentDidUpdate-->更新Dom 執行render 時進入
*/
var ReceiveProps=React.createClass({displayName: "ReceiveProps",
    getInitialState:function(){
        return {scy:false}
    },
    /*Props 及State變動進入 確定是否更新Dom 當回傳true會執行 render*/
    shouldComponentUpdate:function(nextProps,nexState){
        console.log('Props 及State變動進入 shouldComponentUpdate' ,`Pross:${nextProps.val}`, `start:${nexState.scy}`);
        return nextProps.val%5===0;
    },
    /*Props被異動時*/
    componentWillReceiveProps:function(noexProps){

        console.log("Props被異動時 compoentWillReceiveProps", `原始:${this.props.val}` , `異動後:${noexProps.val}`);
        this.setState({
            scy:noexProps.val>this.props.val
        });

    },
    /*更新Dom 執行render完進入*/
    componentDidUpdate: function(prevProps, prevState) {
        console.log("componentDidUpdate");
       /* console.log('prevProps', prevProps);
        console.log('prevState', prevState);*/

    },update:function(){
       this.setProps({val:this.props.val+1})
    },render:function(){
        console.log("執行render");
        return (
            React.createElement("button", {onClick: this.update}, 
                "ReceiveProps:", this.props.val
            )
        )

    }
});
React.render(React.createElement(ReceiveProps, {val: 0}),document.getElementById("ReceivePropsTest"))


/*componentWillMount componentDidMount componentWillUnmount*/
var Button=React.createClass({displayName: "Button",
  /*初始化State */
    getInitialState:function(){
        console.log("getInitialState")
        return {val:0} ;
    },
    /*Component 初始化執行一次 */
    componentWillMount:function(){
        console.log("mount")
        this.setState({m:parseInt(2,10)});
    },
     /*Component 初始完成執行一次*/
    componentDidMount:function(){
        this.inc= setInterval(this.update, 500);
    },
     /*Component 被除役執行一次 */
    componentWillUnmount:function(){
        console.log("Unmount")
        clearInterval(this.inc)
    },
    update:function(){

      this.setState({val:this.state.val+1});
    },
    render:function(){
        console.log("render")
        return ( React.createElement("button", {onClick: this.update}, " ", this.state.val, " * ", this.state.m, " = ", this.state.val*this.state.m, " "))

    }
});

var App=React.createClass({displayName: "App",
    AddBtn:function(){
        /*加入一個 Compoent*/
        React.render(React.createElement(Button, {data: this.props.data}),document.getElementById("div1") )
    },
    DeleteBtn:function(){
        /*移除一個 Compoent*/
        React.unmountComponentAtNode(document.getElementById("div1"));
    },
    render:function(){

    return (
        React.createElement("div", null, 
            React.createElement("input", {type: "button", onClick: this.AddBtn, value: "Add BTN", data: this.props.data}), 
            React.createElement("input", {type: "button", onClick: this.DeleteBtn, value: "Delete BTN", data: this.props.data}), 
            React.createElement("div", {id: "div1"})
        )
    );
    }
});

var AddNode=function(){
    React.render(React.createElement(Button, {val: 0}),document.getElementById("componentMountTest"));
}

var deleteNode=function(){
    React.unmountComponentAtNode(document.getElementById("componentMountTest"));
}

React.render(React.createElement(App, {data: datas}) ,document.getElementById("componentMountTest"));


var catalog = [
  {
    Id: 1,
    price: 5,
    description: 'this is a <b>cool</b> product'
  },
  {
    Id: 2,
    price: 5,
    description: '<span style="color:blue">this is a cool product</span>'
  },
  {
    Id: 3,
    price: 5,
    description: '<b>this</b> is a cool product'
  },
  {
    Id: 4,
    price: 5,
    description: '<b><i>this</i> is the coolest product!</b>'
  },
  {
    Id: 5,
    price: 5,
    description: '<span style="color:red">this is a cool product</span>'
  },
  {
    Id: 6,
    price: 5,
    description: 'this is a <i>cool</i> product'
  }
];

var InnerHTML = React.createClass({displayName: "InnerHTML",
	getInitialState: function() {
		return {
			val: catalog
		};
	},
	render: function() {
		return (
			React.createElement("ul", null, 
      		
      			this.state.val.map(function(item){
      				/*透過這一段將html插到頁面上
      				dangerouslySetInnerHTML={{__html: item.description}} */
      				return React.createElement("li", {dangerouslySetInnerHTML: {__html: item.description}})
      			})
      		
			)
		);
	}

});

React.render(React.createElement(InnerHTML, null),document.getElementById("innerHtml"));


var CommentBox = React.createClass({displayName: "CommentBox",
    getData: function() {
        return [
            {
                author: "Pete Hunt",
                text: "This is one comment"
            },
            {
                author: "Jordan Walke",
                text: "This is *another* comment"
            }
        ];
    },
    getInitialState: function() {
        return {
            data: []
        };
    },
    commentSubmit: function(obj) {
        var comments = this.state.data;
        var newComments = comments.concat([obj]);
        this.setState({
            data: newComments
        });

    },
    componentWillMount: function() {
        this.setState({
            data: this.getData()
        });
    },
    render: function() {
        return (
            React.createElement("div", {className: "commentBox"}, 
		         React.createElement("h1", null, " comment Box "), 
		         React.createElement(CommentList, {data:   this.state.data}), 
		         React.createElement(CommentForm, {commentSubmit: this.commentSubmit})
	         )
        );
    }
});

var converter = new Showdown.converter();
var Comment = React.createClass({displayName: "Comment",
    render: function() {
        var rawMarkup = converter.makeHtml(this.props.children.toString());
        return (
            React.createElement("div", {className: "comment"}, 
                	React.createElement("h2", {className: "commentAuthor"}, " ",  this.props.author, " "), 
                	React.createElement("span", null, " ", this.props.children.toString(), " ")
            )
        );
    }
});

var CommentList = React.createClass({displayName: "CommentList",
    render: function() {
        var commentNode = this.props.data.map(function(comment) {
            return React.createElement(Comment, {author: comment.author}, " ",  comment.text, " ");
        });

        return (
            React.createElement("div", {className: "commentList"}, 
                commentNode
            )
        );
    }
});

var CommentForm = React.createClass({displayName: "CommentForm",
    isSubmit: function() {

        var author = this.refs.author.getDOMNode().value.trim();
        var text = this.refs.text.getDOMNode().value.trim();

        this.props.commentSubmit({
            author: author,
            text: text
        });

        this.refs.author.getDOMNode().value = "";
        this.refs.text.getDOMNode().value = "";

        return false;
    },
    render: function() {
        return (
            React.createElement("form", {className: "commentForm", onSubmit:  this.isSubmit}, 
	            React.createElement("input", {type: "text", placeholder: "name", ref: "author"}), 
	            React.createElement("input", {type: "text", placeholder: "say something", ref: "text"}), 
	            React.createElement("input", {type: "submit", value: "Post"})
	         )
        );
    }
});

React.render( React.createElement(CommentBox, null) , document.getElementById("content"));


/*透過map 動態生成 talbe 須設定key(唯一值)*/

var Table=React.createClass({displayName: "Table",
	getInitialState:function  () {
		return ({
			data: [{"id":1,"fname":"Manish","lname":"Crosswhite"},{"id":2,"fname":"Atul","lname":"Groll"},{"id":3,"fname":"Jitender","lname":"Symes"},{"id":4,"fname":"Eva","lname":"Fox"},{"id":5,"fname":"Haidi","lname":"Szymanski"}]
		});
	},
	render:function(){
		return (
			React.createElement("table", null, 
				"return ", React.createElement(Row, {data: this.state.data[0]})
			)
		);
	}

});

var Row=React.createClass({displayName: "Row",
	render:function(){
		return (
			React.createElement("tr", null, 
				React.createElement("td", null, this.props.data.id), 
				React.createElement("td", null, this.props.data.fname), 
				React.createElement("td", null, this.props.data.lname)
			)
		);
	}
});

React.render(React.createElement(Table, null),document.getElementById("MapTest"))


/*propTypes 設定外部傳入的參數型別*/
 var Car = function (wheel, brand) {
	   this.wheel = wheel;
	   this.brand = brand;
 };

var PropTyoes=React.createClass({displayName: "PropTyoes",
	propTypes:{
		array	   :React.PropTypes.array    ,       // 陣列
		bool	   :React.PropTypes.bool.isRequired ,// Boolean 且必要。
		func	   :React.PropTypes.func,            // 函式
		number 	   :React.PropTypes.number,          // 數字
		obj		   :React.PropTypes.object ,         // 物件
		string	   :React.PropTypes.string ,         // 字串
		node 	   :React.PropTypes.node  ,          // 任何類型   : numbers, strings, elements 或者任何這種類型的陣列
		element    :React.PropTypes.element ,        // React 元素
		instanceOf :React.PropTypes.instanceOf(Car), // 某種XXX類別的實體
		oneOf 	   :React.PropTypes.oneOf(['foo', 'bar']), // 其中一個字串
		oneOfType  :React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]), // 其中一種格式類型
		arrayOf	   :React.PropTypes.arrayOf(React.PropTypes.string) , // 某種類型的陣列(字串類型)
		objectOf   :React.PropTypes.objectOf(React.PropTypes.string), // 具有某種屬性類型的物件(字串類型)
		shape	   :React.PropTypes.shape({                          // 需符合指定格式的物件
		  	color: React.PropTypes.string,
		  	fontSize: React.PropTypes.number
		}),
		any        :React.PropTypes.any.isRequired  // 可以是任何格式，且必要。
	},
	getDefaultProps:function(){
		return ({
			array     : ["a",1,null],
			bool      : false,
			func      : function(){ return "is Fun" },
			number	  : 1,
			obj       : {id: "ID"},
			instanceOf: new Car(4, 'Toyota'),
			any       : 1
		});
	},
	render:function () {
		return (
			React.createElement("div", null, 
				"123:", this.props.bool
			)
		);
	}
});

React.render(React.createElement(PropTyoes, null),document.getElementById("PropTyoes"))
